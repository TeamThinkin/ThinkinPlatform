using Normal.Realtime;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class UserInfoModel
{
    [RealtimeProperty(1, true, true)]
    private string _displayName;

    [RealtimeProperty(2, true, true)]
    private string _avatarUrl;

    [RealtimeProperty(3, true, false)]
    private bool _leftHandIsPointing;

    [RealtimeProperty(4, true, false)]
    private float _leftHandGripStrength;

    [RealtimeProperty(5, true, false)]
    private bool _rightHandIsPointing;

    [RealtimeProperty(6, true, false)]
    private float _rightHandGripStrength;

}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class UserInfoModel : RealtimeModel {
    public string displayName {
        get {
            return _displayNameProperty.value;
        }
        set {
            if (_displayNameProperty.value == value) return;
            _displayNameProperty.value = value;
            InvalidateReliableLength();
            FireDisplayNameDidChange(value);
        }
    }
    
    public string avatarUrl {
        get {
            return _avatarUrlProperty.value;
        }
        set {
            if (_avatarUrlProperty.value == value) return;
            _avatarUrlProperty.value = value;
            InvalidateReliableLength();
            FireAvatarUrlDidChange(value);
        }
    }
    
    public bool leftHandIsPointing {
        get {
            return _leftHandIsPointingProperty.value;
        }
        set {
            if (_leftHandIsPointingProperty.value == value) return;
            _leftHandIsPointingProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public float leftHandGripStrength {
        get {
            return _leftHandGripStrengthProperty.value;
        }
        set {
            if (_leftHandGripStrengthProperty.value == value) return;
            _leftHandGripStrengthProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public bool rightHandIsPointing {
        get {
            return _rightHandIsPointingProperty.value;
        }
        set {
            if (_rightHandIsPointingProperty.value == value) return;
            _rightHandIsPointingProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public float rightHandGripStrength {
        get {
            return _rightHandGripStrengthProperty.value;
        }
        set {
            if (_rightHandGripStrengthProperty.value == value) return;
            _rightHandGripStrengthProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(UserInfoModel model, T value);
    public event PropertyChangedHandler<string> displayNameDidChange;
    public event PropertyChangedHandler<string> avatarUrlDidChange;
    
    public enum PropertyID : uint {
        DisplayName = 1,
        AvatarUrl = 2,
        LeftHandIsPointing = 3,
        LeftHandGripStrength = 4,
        RightHandIsPointing = 5,
        RightHandGripStrength = 6,
    }
    
    #region Properties
    
    private ReliableProperty<string> _displayNameProperty;
    
    private ReliableProperty<string> _avatarUrlProperty;
    
    private ReliableProperty<bool> _leftHandIsPointingProperty;
    
    private ReliableProperty<float> _leftHandGripStrengthProperty;
    
    private ReliableProperty<bool> _rightHandIsPointingProperty;
    
    private ReliableProperty<float> _rightHandGripStrengthProperty;
    
    #endregion
    
    public UserInfoModel() : base(null) {
        _displayNameProperty = new ReliableProperty<string>(1, _displayName);
        _avatarUrlProperty = new ReliableProperty<string>(2, _avatarUrl);
        _leftHandIsPointingProperty = new ReliableProperty<bool>(3, _leftHandIsPointing);
        _leftHandGripStrengthProperty = new ReliableProperty<float>(4, _leftHandGripStrength);
        _rightHandIsPointingProperty = new ReliableProperty<bool>(5, _rightHandIsPointing);
        _rightHandGripStrengthProperty = new ReliableProperty<float>(6, _rightHandGripStrength);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _displayNameProperty.UnsubscribeCallback();
        _avatarUrlProperty.UnsubscribeCallback();
        _leftHandIsPointingProperty.UnsubscribeCallback();
        _leftHandGripStrengthProperty.UnsubscribeCallback();
        _rightHandIsPointingProperty.UnsubscribeCallback();
        _rightHandGripStrengthProperty.UnsubscribeCallback();
    }
    
    private void FireDisplayNameDidChange(string value) {
        try {
            displayNameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireAvatarUrlDidChange(string value) {
        try {
            avatarUrlDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _displayNameProperty.WriteLength(context);
        length += _avatarUrlProperty.WriteLength(context);
        length += _leftHandIsPointingProperty.WriteLength(context);
        length += _leftHandGripStrengthProperty.WriteLength(context);
        length += _rightHandIsPointingProperty.WriteLength(context);
        length += _rightHandGripStrengthProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _displayNameProperty.Write(stream, context);
        writes |= _avatarUrlProperty.Write(stream, context);
        writes |= _leftHandIsPointingProperty.Write(stream, context);
        writes |= _leftHandGripStrengthProperty.Write(stream, context);
        writes |= _rightHandIsPointingProperty.Write(stream, context);
        writes |= _rightHandGripStrengthProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.DisplayName: {
                    changed = _displayNameProperty.Read(stream, context);
                    if (changed) FireDisplayNameDidChange(displayName);
                    break;
                }
                case (uint) PropertyID.AvatarUrl: {
                    changed = _avatarUrlProperty.Read(stream, context);
                    if (changed) FireAvatarUrlDidChange(avatarUrl);
                    break;
                }
                case (uint) PropertyID.LeftHandIsPointing: {
                    changed = _leftHandIsPointingProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.LeftHandGripStrength: {
                    changed = _leftHandGripStrengthProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.RightHandIsPointing: {
                    changed = _rightHandIsPointingProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.RightHandGripStrength: {
                    changed = _rightHandGripStrengthProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _displayName = displayName;
        _avatarUrl = avatarUrl;
        _leftHandIsPointing = leftHandIsPointing;
        _leftHandGripStrength = leftHandGripStrength;
        _rightHandIsPointing = rightHandIsPointing;
        _rightHandGripStrength = rightHandGripStrength;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
