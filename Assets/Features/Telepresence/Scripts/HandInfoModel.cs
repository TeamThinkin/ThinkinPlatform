using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

public struct AvatarHandData
{
    public bool IsPointing;
    public float GripStrength;
    public float RayLength;

    public void CopyToHandInfoModel(HandInfoModel model)
    {
        model.isPointing = IsPointing;
        model.gripStrength = GripStrength;
        model.rayLength = RayLength;
    }

    public void CopyFromHandInfoModel(HandInfoModel model)
    {
        IsPointing = model.isPointing;
        GripStrength = model.gripStrength;
        RayLength = model.rayLength;
    }
}

[RealtimeModel]
public partial class HandInfoModel
{
    [RealtimeProperty(1, false)]
    private bool _isPointing;

    [RealtimeProperty(2, false)]
    private float _gripStrength;

    [RealtimeProperty(3, false)]
    private float _rayLength;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HandInfoModel : RealtimeModel {
    public bool isPointing {
        get {
            return _isPointingProperty.value;
        }
        set {
            if (_isPointingProperty.value == value) return;
            _isPointingProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public float gripStrength {
        get {
            return _gripStrengthProperty.value;
        }
        set {
            if (_gripStrengthProperty.value == value) return;
            _gripStrengthProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public float rayLength {
        get {
            return _rayLengthProperty.value;
        }
        set {
            if (_rayLengthProperty.value == value) return;
            _rayLengthProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public enum PropertyID : uint {
        IsPointing = 1,
        GripStrength = 2,
        RayLength = 3,
    }
    
    #region Properties
    
    private UnreliableProperty<bool> _isPointingProperty;
    
    private UnreliableProperty<float> _gripStrengthProperty;
    
    private UnreliableProperty<float> _rayLengthProperty;
    
    #endregion
    
    public HandInfoModel() : base(null) {
        _isPointingProperty = new UnreliableProperty<bool>(1, _isPointing);
        _gripStrengthProperty = new UnreliableProperty<float>(2, _gripStrength);
        _rayLengthProperty = new UnreliableProperty<float>(3, _rayLength);
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _isPointingProperty.WriteLength(context);
        length += _gripStrengthProperty.WriteLength(context);
        length += _rayLengthProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _isPointingProperty.Write(stream, context);
        writes |= _gripStrengthProperty.Write(stream, context);
        writes |= _rayLengthProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IsPointing: {
                    changed = _isPointingProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.GripStrength: {
                    changed = _gripStrengthProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.RayLength: {
                    changed = _rayLengthProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _isPointing = isPointing;
        _gripStrength = gripStrength;
        _rayLength = rayLength;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
